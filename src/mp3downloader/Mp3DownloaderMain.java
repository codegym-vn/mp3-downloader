/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mp3downloader;

import com.mpatric.mp3agic.ID3v2;
import com.mpatric.mp3agic.ID3v24Tag;
import com.mpatric.mp3agic.InvalidDataException;
import com.mpatric.mp3agic.Mp3File;
import com.mpatric.mp3agic.NotSupportedException;
import com.mpatric.mp3agic.UnsupportedTagException;
import java.awt.BorderLayout;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JPanel;

/**
 *
 * @author nhatnk
 */
public class Mp3DownloaderMain extends javax.swing.JFrame {
    private ArrayList<Category> categories;
    SongTableModel songSearchModel;
    PlaylistTableModel playlistSearchModel;
    String downloadPath;
    /**
     * Creates new form Mp3DownloaderMain
     */
    public Mp3DownloaderMain() {
        initCategories();       
        initComponents();
        initUI();
        pack();
    }
    
    private void initCategories() {
        categories = new ArrayList<>(); 
        categories.add(new Category(5, "Cá nhân"));
        categories.add(new Category(1, "Chủ đề"));
        categories.add(new Category(7, "Việt Nam"));
        categories.add(new Category(8, "Quốc Tế"));
        categories.add(new Category(9, "Hòa Tấu"));
    }
    
    private void initUI(){
        for(Category c : categories) {            
            jTabbedPane1.addTab(c.getName(), new CategoryPanel(this));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        ccbSearchType = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        pnlSearch = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSearchSongs = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        btnSelectAll = new javax.swing.JButton();
        btnDeselectAll = new javax.swing.JButton();
        btnDownload = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        lblStatus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Search:");
        jPanel2.add(jLabel1);

        txtSearch.setMinimumSize(new java.awt.Dimension(14, 80));
        txtSearch.setPreferredSize(new java.awt.Dimension(300, 28));
        jPanel2.add(txtSearch);

        ccbSearchType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Song", "Playlist", "Video" }));
        jPanel2.add(ccbSearchType);

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        jPanel2.add(btnSearch);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        pnlSearch.setLayout(new java.awt.BorderLayout());

        tblSearchSongs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblSearchSongs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSearchSongsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblSearchSongs);

        pnlSearch.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        btnSelectAll.setText("Select All");
        btnSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectAllActionPerformed(evt);
            }
        });
        jPanel3.add(btnSelectAll);

        btnDeselectAll.setText("Deselect All");
        btnDeselectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeselectAllActionPerformed(evt);
            }
        });
        jPanel3.add(btnDeselectAll);

        btnDownload.setText("Download");
        btnDownload.setEnabled(false);
        btnDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownloadActionPerformed(evt);
            }
        });
        jPanel3.add(btnDownload);

        pnlSearch.add(jPanel3, java.awt.BorderLayout.PAGE_END);

        jTabbedPane1.addTab("Tìm kiếm", pnlSearch);

        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        jPanel1.add(lblStatus);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        int index = jTabbedPane1.getSelectedIndex();
        if(jTabbedPane1.getSelectedIndex() > 0) {
            CategoryPanel panel = (CategoryPanel)jTabbedPane1.getSelectedComponent();
            Category selectedCategory = categories.get(index - 1);
            if(!selectedCategory.isLoaded()) {
                selectedCategory.load();
                panel.setSubjects(selectedCategory.getSubjects());
            }
        }
    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String term = txtSearch.getText();
        int searchType = ccbSearchType.getSelectedIndex();
        switch(searchType) {
            case 0:
                ArrayList<Song> songs = ZingSearch.searchSong(term);
                songSearchModel = new SongTableModel(songs);
                tblSearchSongs.setModel(songSearchModel);
                btnDownload.setEnabled(true);
                playlistSearchModel = null;
                break;
            case 1:
                ArrayList<Playlist> playlists = ZingSearch.searchPlaylist(term);                
                playlistSearchModel = new PlaylistTableModel(playlists);
                tblSearchSongs.setDefaultRenderer(JLabel.class, new ImageTableCell());
                tblSearchSongs.setRowHeight(100);
                tblSearchSongs.setModel(playlistSearchModel);
                btnDownload.setEnabled(true);
                songSearchModel = null;
                break;
            case 2:
                btnDownload.setEnabled(true);
                break;
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownloadActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (fileChooser.showDialog(this, "Select") != JFileChooser.APPROVE_OPTION) 
            return;
        downloadPath = fileChooser.getSelectedFile().getAbsolutePath();
        if (songSearchModel != null) {
            new Thread(new Runnable() {
                @Override
                public void run() {
                    for (int i = 0; i < songSearchModel.getSongs().size(); i++) {
                        if(songSearchModel.getSongs().get(i).isSelected()) {
                            download(songSearchModel.getSongs().get(i), downloadPath);
                        }
                    }
                }
            }).start();
        }
    }//GEN-LAST:event_btnDownloadActionPerformed

    private void tblSearchSongsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSearchSongsMouseClicked
        if (evt.getClickCount() == 2) {
            if (playlistSearchModel != null) {
                int selectedRow = tblSearchSongs.getSelectedRow();
                Playlist p = playlistSearchModel.getPlaylists().get(selectedRow);
                ArrayList<Song> songs = ZingSearch.getPlaylistDetail(p.getId());
                songSearchModel = new SongTableModel(songs);
                tblSearchSongs.setModel(songSearchModel);
                btnDownload.setEnabled(true);
            }
        }
    }//GEN-LAST:event_tblSearchSongsMouseClicked

    private void btnSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectAllActionPerformed
        if (songSearchModel != null) {
            for(Song s: songSearchModel.getSongs()) {
                s.setSelected(true);
            }
        }
        songSearchModel.fireTableDataChanged();
    }//GEN-LAST:event_btnSelectAllActionPerformed

    private void btnDeselectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeselectAllActionPerformed
        if (songSearchModel != null) {
            for(Song s: songSearchModel.getSongs()) {
                s.setSelected(false);
            }
        }
        songSearchModel.fireTableDataChanged();
    }//GEN-LAST:event_btnDeselectAllActionPerformed

    private void download(Song song, String path) {
        try {            
            setStatus("Downloading: " + song.getTitle());
            String urlString = song.getSource();
            if(urlString.contains("?")) {
                urlString = urlString.substring(0, urlString.indexOf("?"));
            }
            URL url = new URL(urlString);
            URLConnection conn = url.openConnection();
            conn.addRequestProperty("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:45.0) Gecko/20100101 Firefox/45.0");
            InputStream is = conn.getInputStream();
            BufferedInputStream bis = new BufferedInputStream(is);
            FileOutputStream fos = new FileOutputStream(path + File.separator + song.getId()+ "." + song.getType());
            BufferedOutputStream bos = new BufferedOutputStream(fos);
            byte[] buf = new byte[4000];
            int lenght = 0;
            while ((lenght = bis.read(buf)) != -1) {
                bos.write(buf, 0, lenght);
            }
            bos.close();
            is.close();
            setStatus("Downloaded: " + song.getTitle());
            songSearchModel.refresh(song.getId());
            updateTags(song.getId());
            
        } catch (MalformedURLException ex) {
            Logger.getLogger(SongSubject.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(SongSubject.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void updateTags(String id) {
        try {
            Song song = songSearchModel.searchSong(id);
            String originalPath = downloadPath + File.separator + id + "." + song.getType();
            Mp3File mp3file = new Mp3File(originalPath);
            ID3v2 id3v2Tag = null;
            if (mp3file.hasId3v2Tag()) {
                id3v2Tag = mp3file.getId3v2Tag();
            } else {
                id3v2Tag = new ID3v24Tag();
                mp3file.setId3v2Tag(id3v2Tag);
            }
            id3v2Tag.setTitle(song.getTitle());
                id3v2Tag.setArtist(song.getPerformer());                
                id3v2Tag.setAlbum("Mp3Downloader");
            mp3file.save(downloadPath + File.separator + song.getTitle() + "." + song.getType());
            File file = new File(originalPath);
            file.delete();
        } catch (IOException ex) {
            Logger.getLogger(CategoryPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedTagException ex) {
            Logger.getLogger(CategoryPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidDataException ex) {
            Logger.getLogger(CategoryPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NotSupportedException ex) {
            Logger.getLogger(CategoryPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void setStatus(String message) {
        lblStatus.setText(message);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Mp3DownloaderMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Mp3DownloaderMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Mp3DownloaderMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Mp3DownloaderMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Mp3DownloaderMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeselectAll;
    private javax.swing.JButton btnDownload;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSelectAll;
    private javax.swing.JComboBox<String> ccbSearchType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JPanel pnlSearch;
    private javax.swing.JTable tblSearchSongs;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
